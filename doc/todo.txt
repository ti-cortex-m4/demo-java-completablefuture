CompletionStage
apply,accept,run=Function,Consumer,Runnable
compose,combine
then,both,either
async
exceptionally,handle,whenComplete

# Creating CompletableFuture
runAsync
supplyAsync

# Completing CompletableFuture
complete
completeExceptionally

# Transforming and acting on one CompletableFuture
thenApply
thenApplyAsync

# Running code on completion
thenAccept
thenAcceptAsync
thenRun
thenRunAsync

# Combining two CompletableFuture together

# Error handling of single CompletableFuture
exceptionally
exceptionallyAsync

## Combining (chaining) two futures
thenCompose
thenComposeAsync

## Transforming values of two futures
thenCombine
thenCombineAsync

## Waiting for both CompletableFutures to complete
thenAcceptBoth
thenAcceptBothAsync
runAfterBoth
runAfterBothAsync

# Waiting for first CompletableFuture to complete
acceptEither
acceptEitherAsync
applyToEither
applyToEitherAsync

# Combining multiple CompletableFuture together
allOf
anyOf