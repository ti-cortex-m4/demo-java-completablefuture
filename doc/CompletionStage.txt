public abstract CompletionStage CompletionStage.acceptEither(CompletionStage,java.util.function.Consumer)
public abstract CompletionStage CompletionStage.acceptEitherAsync(CompletionStage,java.util.function.Consumer)
public abstract CompletionStage CompletionStage.acceptEitherAsync(CompletionStage,java.util.function.Consumer,Executor)
public abstract CompletionStage CompletionStage.applyToEither(CompletionStage,java.util.function.Function)
public abstract CompletionStage CompletionStage.applyToEitherAsync(CompletionStage,java.util.function.Function,Executor)
public abstract CompletionStage CompletionStage.applyToEitherAsync(CompletionStage,java.util.function.Function)
public abstract CompletionStage CompletionStage.exceptionally(java.util.function.Function)
public default CompletionStage CompletionStage.exceptionallyAsync(java.util.function.Function)
public default CompletionStage CompletionStage.exceptionallyAsync(java.util.function.Function,Executor)
public default CompletionStage CompletionStage.exceptionallyCompose(java.util.function.Function)
public default CompletionStage CompletionStage.exceptionallyComposeAsync(java.util.function.Function)
public default CompletionStage CompletionStage.exceptionallyComposeAsync(java.util.function.Function,Executor)
public abstract CompletionStage CompletionStage.handle(java.util.function.BiFunction)
public abstract CompletionStage CompletionStage.handleAsync(java.util.function.BiFunction,Executor)
public abstract CompletionStage CompletionStage.handleAsync(java.util.function.BiFunction)
public abstract CompletionStage CompletionStage.runAfterBoth(CompletionStage,java.lang.Runnable)
public abstract CompletionStage CompletionStage.runAfterBothAsync(CompletionStage,java.lang.Runnable)
public abstract CompletionStage CompletionStage.runAfterBothAsync(CompletionStage,java.lang.Runnable,Executor)
public abstract CompletionStage CompletionStage.runAfterEither(CompletionStage,java.lang.Runnable)
public abstract CompletionStage CompletionStage.runAfterEitherAsync(CompletionStage,java.lang.Runnable,Executor)
public abstract CompletionStage CompletionStage.runAfterEitherAsync(CompletionStage,java.lang.Runnable)
public abstract CompletionStage CompletionStage.thenAccept(java.util.function.Consumer)
public abstract CompletionStage CompletionStage.thenAcceptAsync(java.util.function.Consumer)
public abstract CompletionStage CompletionStage.thenAcceptAsync(java.util.function.Consumer,Executor)
public abstract CompletionStage CompletionStage.thenAcceptBoth(CompletionStage,java.util.function.BiConsumer)
public abstract CompletionStage CompletionStage.thenAcceptBothAsync(CompletionStage,java.util.function.BiConsumer,Executor)
public abstract CompletionStage CompletionStage.thenAcceptBothAsync(CompletionStage,java.util.function.BiConsumer)
public abstract CompletionStage CompletionStage.thenApply(java.util.function.Function)
public abstract CompletionStage CompletionStage.thenApplyAsync(java.util.function.Function,Executor)
public abstract CompletionStage CompletionStage.thenApplyAsync(java.util.function.Function)
public abstract CompletionStage CompletionStage.thenCombine(CompletionStage,java.util.function.BiFunction)
public abstract CompletionStage CompletionStage.thenCombineAsync(CompletionStage,java.util.function.BiFunction)
public abstract CompletionStage CompletionStage.thenCombineAsync(CompletionStage,java.util.function.BiFunction,Executor)
public abstract CompletionStage CompletionStage.thenCompose(java.util.function.Function)
public abstract CompletionStage CompletionStage.thenComposeAsync(java.util.function.Function)
public abstract CompletionStage CompletionStage.thenComposeAsync(java.util.function.Function,Executor)
public abstract CompletionStage CompletionStage.thenRun(java.lang.Runnable)
public abstract CompletionStage CompletionStage.thenRunAsync(java.lang.Runnable,Executor)
public abstract CompletionStage CompletionStage.thenRunAsync(java.lang.Runnable)
public abstract CompletableFuture CompletionStage.toCompletableFuture()
public abstract CompletionStage CompletionStage.whenComplete(java.util.function.BiConsumer)
public abstract CompletionStage CompletionStage.whenCompleteAsync(java.util.function.BiConsumer)
public abstract CompletionStage CompletionStage.whenCompleteAsync(java.util.function.BiConsumer,Executor)
