    abstract CompletionStage acceptEither(CompletionStage,java.util.function.Consumer)
    abstract CompletionStage acceptEitherAsync(CompletionStage,java.util.function.Consumer)
    abstract CompletionStage acceptEitherAsync(CompletionStage,java.util.function.Consumer,Executor)

    abstract CompletionStage applyToEither(CompletionStage,java.util.function.Function)
    abstract CompletionStage applyToEitherAsync(CompletionStage,java.util.function.Function,Executor)
    abstract CompletionStage applyToEitherAsync(CompletionStage,java.util.function.Function)

abstract CompletionStage exceptionally(java.util.function.Function)
default CompletionStage exceptionallyAsync(java.util.function.Function)
default CompletionStage exceptionallyAsync(java.util.function.Function,Executor)

default CompletionStage exceptionallyCompose(java.util.function.Function)
default CompletionStage exceptionallyComposeAsync(java.util.function.Function)
default CompletionStage exceptionallyComposeAsync(java.util.function.Function,Executor)

abstract CompletionStage handle(java.util.function.BiFunction)
abstract CompletionStage handleAsync(java.util.function.BiFunction,Executor)
abstract CompletionStage handleAsync(java.util.function.BiFunction)

    abstract CompletionStage runAfterBoth(CompletionStage,java.lang.Runnable)
    abstract CompletionStage runAfterBothAsync(CompletionStage,java.lang.Runnable)
    abstract CompletionStage runAfterBothAsync(CompletionStage,java.lang.Runnable,Executor)

    abstract CompletionStage runAfterEither(CompletionStage,java.lang.Runnable)
    abstract CompletionStage runAfterEitherAsync(CompletionStage,java.lang.Runnable,Executor)
    abstract CompletionStage runAfterEitherAsync(CompletionStage,java.lang.Runnable)

    abstract CompletionStage thenAccept(java.util.function.Consumer)
    abstract CompletionStage thenAcceptAsync(java.util.function.Consumer)
    abstract CompletionStage thenAcceptAsync(java.util.function.Consumer,Executor)

    abstract CompletionStage thenAcceptBoth(CompletionStage,java.util.function.BiConsumer)
    abstract CompletionStage thenAcceptBothAsync(CompletionStage,java.util.function.BiConsumer,Executor)
    abstract CompletionStage thenAcceptBothAsync(CompletionStage,java.util.function.BiConsumer)

    abstract CompletionStage thenApply(java.util.function.Function)
    abstract CompletionStage thenApplyAsync(java.util.function.Function,Executor)
    abstract CompletionStage thenApplyAsync(java.util.function.Function)

    abstract CompletionStage thenCombine(CompletionStage,java.util.function.BiFunction)
    abstract CompletionStage thenCombineAsync(CompletionStage,java.util.function.BiFunction)
    abstract CompletionStage thenCombineAsync(CompletionStage,java.util.function.BiFunction,Executor)

abstract CompletionStage thenCompose(java.util.function.Function)
abstract CompletionStage thenComposeAsync(java.util.function.Function)
abstract CompletionStage thenComposeAsync(java.util.function.Function,Executor)

    abstract CompletionStage thenRun(java.lang.Runnable)
abstract CompletionStage thenRunAsync(java.lang.Runnable,Executor)
abstract CompletionStage thenRunAsync(java.lang.Runnable)

abstract CompletableFuture toCompletableFuture()

abstract CompletionStage whenComplete(java.util.function.BiConsumer)
abstract CompletionStage whenCompleteAsync(java.util.function.BiConsumer)
abstract CompletionStage whenCompleteAsync(java.util.function.BiConsumer,Executor)
