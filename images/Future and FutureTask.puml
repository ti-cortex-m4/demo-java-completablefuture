@startuml

!include header.iuml


interface java.util.concurrent.Future {
	{method}  {abstract} +cancel ( mayInterruptIfRunning : boolean ) : boolean
	{method}  {abstract} +get () : Object
	{method}  {abstract} +get ( timeout : long , unit : java.util.concurrent.TimeUnit ) : Object
	{method}  {abstract} +isCancelled () : boolean
	{method}  {abstract} +isDone () : boolean
}


class java.util.concurrent.FutureTask {
	{method} +cancel ( mayInterruptIfRunning : boolean ) : boolean
	{method} +get () : Object
	{method} +get ( timeout : long , unit : java.util.concurrent.TimeUnit ) : Object
	{method} +isDone () : boolean
	{method} +run () : void
	{method} +toString () : String
}


interface java.util.concurrent.RunnableFuture {
	{method}  {abstract} +run () : void
}


java.util.concurrent.FutureTask ..|>  java.util.concurrent.RunnableFuture
java.util.concurrent.RunnableFuture ..|>  java.util.concurrent.Future


@enduml