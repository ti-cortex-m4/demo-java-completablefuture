@startuml

!include header.iuml

class java.util.concurrent.CompletableFuture {
	{method} +acceptEither ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramConsumer2 : Consumer ) : java.util.concurrent.CompletableFuture
	{method} +acceptEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramConsumer2 : Consumer ) : java.util.concurrent.CompletableFuture
	{method} +acceptEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramConsumer2 : Consumer , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method}  {static} +allOf ( paramCompletableFuture;1 : [Ljava.util.concurrent.CompletableFuture; ) : java.util.concurrent.CompletableFuture
	{method}  {static} +anyOf ( paramCompletableFuture;1 : [Ljava.util.concurrent.CompletableFuture; ) : java.util.concurrent.CompletableFuture
	{method} +applyToEither ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramFunction2 : Function ) : java.util.concurrent.CompletableFuture
	{method} +applyToEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramFunction2 : Function ) : java.util.concurrent.CompletableFuture
	{method} +applyToEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramFunction2 : Function , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +cancel ( paramboolean1 : boolean ) : boolean
	{method} +complete ( paramObject1 : Object ) : boolean
	{method} +completeAsync ( paramSupplier1 : Supplier ) : java.util.concurrent.CompletableFuture
	{method} +completeAsync ( paramSupplier1 : Supplier , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +completeExceptionally ( paramThrowable1 : Throwable ) : boolean
	{method} +completeOnTimeout ( paramObject1 : Object , paramlong2 : long , paramTimeUnit3 : java.util.concurrent.TimeUnit ) : java.util.concurrent.CompletableFuture
	{method}  {static} +completedFuture ( paramObject1 : Object ) : java.util.concurrent.CompletableFuture
	{method}  {static} +completedStage ( paramObject1 : Object ) : java.util.concurrent.CompletionStage
	{method} +copy () : java.util.concurrent.CompletableFuture
	{method} +defaultExecutor () : java.util.concurrent.Executor
	{method}  {static} +delayedExecutor ( paramlong1 : long , paramTimeUnit2 : java.util.concurrent.TimeUnit ) : java.util.concurrent.Executor
	{method}  {static} +delayedExecutor ( paramlong1 : long , paramTimeUnit2 : java.util.concurrent.TimeUnit , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.Executor
	{method} +exceptionally ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +exceptionallyAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +exceptionallyAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +exceptionallyCompose ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +exceptionallyComposeAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +exceptionallyComposeAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method}  {static} +failedFuture ( paramThrowable1 : Throwable ) : java.util.concurrent.CompletableFuture
	{method}  {static} +failedStage ( paramThrowable1 : Throwable ) : java.util.concurrent.CompletionStage
	{method} +get () : Object
	{method} +get ( paramlong1 : long , paramTimeUnit2 : java.util.concurrent.TimeUnit ) : Object
	{method} +getNow ( paramObject1 : Object ) : Object
	{method} +getNumberOfDependents () : int
	{method} +handle ( paramBiFunction1 : BiFunction ) : java.util.concurrent.CompletableFuture
	{method} +handleAsync ( paramBiFunction1 : BiFunction ) : java.util.concurrent.CompletableFuture
	{method} +handleAsync ( paramBiFunction1 : BiFunction , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +isCancelled () : boolean
	{method} +isCompletedExceptionally () : boolean
	{method} +isDone () : boolean
	{method} +join () : Object
	{method} +minimalCompletionStage () : java.util.concurrent.CompletionStage
	{method} +newIncompleteFuture () : java.util.concurrent.CompletableFuture
	{method} +obtrudeException ( paramThrowable1 : Throwable ) : void
	{method} +obtrudeValue ( paramObject1 : Object ) : void
	{method} +orTimeout ( paramlong1 : long , paramTimeUnit2 : java.util.concurrent.TimeUnit ) : java.util.concurrent.CompletableFuture
	{method} +runAfterBoth ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletableFuture
	{method} +runAfterBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletableFuture
	{method} +runAfterBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +runAfterEither ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletableFuture
	{method} +runAfterEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletableFuture
	{method} +runAfterEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method}  {static} +runAsync ( paramRunnable1 : Runnable ) : java.util.concurrent.CompletableFuture
	{method}  {static} +runAsync ( paramRunnable1 : Runnable , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method}  {static} +supplyAsync ( paramSupplier1 : Supplier ) : java.util.concurrent.CompletableFuture
	{method}  {static} +supplyAsync ( paramSupplier1 : Supplier , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +thenAccept ( paramConsumer1 : Consumer ) : java.util.concurrent.CompletableFuture
	{method} +thenAcceptAsync ( paramConsumer1 : Consumer ) : java.util.concurrent.CompletableFuture
	{method} +thenAcceptAsync ( paramConsumer1 : Consumer , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +thenAcceptBoth ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiConsumer2 : BiConsumer ) : java.util.concurrent.CompletableFuture
	{method} +thenAcceptBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiConsumer2 : BiConsumer ) : java.util.concurrent.CompletableFuture
	{method} +thenAcceptBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiConsumer2 : BiConsumer , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +thenApply ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +thenApplyAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +thenApplyAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +thenCombine ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction ) : java.util.concurrent.CompletableFuture
	{method} +thenCombineAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction ) : java.util.concurrent.CompletableFuture
	{method} +thenCombineAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method} +thenCombineAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +thenCompose ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +thenComposeAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletableFuture
	{method} +thenComposeAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +thenRun ( paramRunnable1 : Runnable ) : java.util.concurrent.CompletableFuture
	{method} +thenRunAsync ( paramRunnable1 : Runnable ) : java.util.concurrent.CompletableFuture
	{method} +thenRunAsync ( paramRunnable1 : Runnable , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
	{method} +toCompletableFuture () : java.util.concurrent.CompletableFuture
	{method} +toString () : String
	{method} +whenComplete ( paramBiConsumer1 : BiConsumer ) : java.util.concurrent.CompletableFuture
	{method} +whenCompleteAsync ( paramBiConsumer1 : BiConsumer ) : java.util.concurrent.CompletableFuture
	{method} +whenCompleteAsync ( paramBiConsumer1 : BiConsumer , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletableFuture
}

@enduml