@startuml

!include header.iuml

interface java.util.concurrent.CompletionStage {
	{method}  {abstract} +acceptEither ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramConsumer2 : Consumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +acceptEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramConsumer2 : Consumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +acceptEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramConsumer2 : Consumer , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +applyToEither ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramFunction2 : Function ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +applyToEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramFunction2 : Function ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +applyToEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramFunction2 : Function , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +exceptionally ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method} +exceptionallyAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method} +exceptionallyAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method} +exceptionallyCompose ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method} +exceptionallyComposeAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method} +exceptionallyComposeAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +handle ( paramBiFunction1 : BiFunction ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +handleAsync ( paramBiFunction1 : BiFunction ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +handleAsync ( paramBiFunction1 : BiFunction , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +runAfterBoth ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +runAfterBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +runAfterBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +runAfterEither ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +runAfterEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +runAfterEitherAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramRunnable2 : Runnable , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenAccept ( paramConsumer1 : Consumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenAcceptAsync ( paramConsumer1 : Consumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenAcceptAsync ( paramConsumer1 : Consumer , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenAcceptBoth ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiConsumer2 : BiConsumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenAcceptBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiConsumer2 : BiConsumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenAcceptBothAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiConsumer2 : BiConsumer , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenApply ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenApplyAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenApplyAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenCombine ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenCombineAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenCombineAsync ( paramCompletionStage1 : java.util.concurrent.CompletionStage , paramBiFunction2 : BiFunction , paramExecutor3 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenCompose ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenComposeAsync ( paramFunction1 : Function ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenComposeAsync ( paramFunction1 : Function , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenRun ( paramRunnable1 : Runnable ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenRunAsync ( paramRunnable1 : Runnable ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +thenRunAsync ( paramRunnable1 : Runnable , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +toCompletableFuture () : java.util.concurrent.CompletableFuture
	{method}  {abstract} +whenComplete ( paramBiConsumer1 : BiConsumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +whenCompleteAsync ( paramBiConsumer1 : BiConsumer ) : java.util.concurrent.CompletionStage
	{method}  {abstract} +whenCompleteAsync ( paramBiConsumer1 : BiConsumer , paramExecutor2 : java.util.concurrent.Executor ) : java.util.concurrent.CompletionStage
}

@enduml